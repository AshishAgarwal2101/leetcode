/**
 *
 * 105. Construct Binary Tree from Preorder and Inorder Traversal:::::
 * 
 * Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.
 * 
 *  
 * 
 * Example 1:
 * 
 * 
 * Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]
 * Output: [3,9,20,null,null,15,7]
 * 
 * Example 2:
 * 
 * Input: preorder = [-1], inorder = [-1]
 * Output: [-1]
 *  
 * 
 * Constraints:
 * 
 * 1 <= preorder.length <= 3000
 * inorder.length == preorder.length
 * -3000 <= preorder[i], inorder[i] <= 3000
 * preorder and inorder consist of unique values.
 * Each value of inorder also appears in preorder.
 * preorder is guaranteed to be the preorder traversal of the tree.
 * inorder is guaranteed to be the inorder traversal of the tree.
 * 
*/



import java.util.*;

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class SubOrderTree {
    int[] val;
    int start;
    int end;
    
    SubOrderTree() {}
    SubOrderTree(int[] val, int start, int end){
        this.val = val;
        this.start = start;
        this.end = end;
    }
}

class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        SubOrderTree subPreorder = new SubOrderTree(preorder, 0, preorder.length-1);
        SubOrderTree subInorder = new SubOrderTree(inorder, 0, inorder.length-1);
        return createBinaryTree(subPreorder, subInorder);
    }
    
    public TreeNode createBinaryTree(SubOrderTree preorder, SubOrderTree inorder){
        if(preorder.start == preorder.end){
            return new TreeNode(preorder.val[preorder.start]);
        }
        
        int rootVal = preorder.val[preorder.start];
        int inorderRootIndex = inorder.start;
        while(inorder.val[inorderRootIndex] != rootVal){
            inorderRootIndex++;
        }
        
        TreeNode node = new TreeNode(rootVal);
        int numLeftNodes = inorderRootIndex - inorder.start;
        int numRightNodes = inorder.end - inorderRootIndex;
        if(numLeftNodes> 0){
            SubOrderTree subPreorder = new SubOrderTree(preorder.val, preorder.start+1, preorder.start+numLeftNodes);
            SubOrderTree subInorder = new SubOrderTree(inorder.val, inorder.start, inorderRootIndex-1);
            node.left = createBinaryTree(subPreorder, subInorder);
        }
        if(numRightNodes> 0){
            SubOrderTree subPreorder = new SubOrderTree(preorder.val, preorder.start+numLeftNodes+1, preorder.start+numLeftNodes+numRightNodes);
            SubOrderTree subInorder = new SubOrderTree(inorder.val, inorderRootIndex+1, inorderRootIndex+numRightNodes);
            node.right = createBinaryTree(subPreorder, subInorder);
        }
        
        return node;
    }
}
